/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package selektorgalaktyk;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author Quchi
 */
public class TworzeniePDF extends javax.swing.JFrame implements Runnable {

   String ścieżkaZapisu;
   BufferedImage Obraz;
   int Czerwony;
   int Niebieski;
   int Zielony;
   int Jasność;
   double Kontrast;
   int wartośćProgowa;
   String RodzajProgowania;
    public TworzeniePDF(BufferedImage Obraz,String ścieżkaZapisu,int Czerwony,int Zielony,int Niebieski,int Jasność, double Kontrast, int wartośćProgowa,String RodzajProgowania) {
        this.Obraz = ustawOryginal(Obraz,520,520);
        this.ścieżkaZapisu = ścieżkaZapisu;
        this.Czerwony = Czerwony;
        this.Zielony = Zielony;
        this.Niebieski= Niebieski;
        this.Jasność = Jasność;
        this.Kontrast = Kontrast;
        this.wartośćProgowa = wartośćProgowa;
        this.RodzajProgowania = RodzajProgowania;
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int) screenSize.getWidth();
        int height = (int) screenSize.getHeight();
        setLocation(width/2, height/2);
        setVisible(true);
    }
         public BufferedImage ustawOryginal(BufferedImage img,int maxX,int maxY){
         BufferedImage  Obraz = null;
         if(img.getWidth()<=maxX&&img.getHeight()<=maxY){
          Obraz=img;
        }
        else if(img.getWidth()>=img.getHeight())
                {
             double stosunekDługościOryginału = (double) maxX/img.getWidth();
                    int NowyY = (int) (img.getHeight()*stosunekDługościOryginału);
                    if(NowyY>maxY){

                        int NowyX =  (int) (maxY*stosunekDługościOryginału);   
                        Obraz=ZmieńRozmiarObrazu(img,NowyX,maxY);
                        }
                    else{
                        Obraz=ZmieńRozmiarObrazu(img,maxX,NowyY);
                    }
           
        }
        
        else if(img.getHeight()>=img.getWidth())
                {
             double stosunekDługościOryginału = (double) maxY/img.getHeight();
                    int NowyX =  (int) (img.getWidth()*stosunekDługościOryginału);
                        if(NowyX>maxX){
                            int NowyY = (int) (maxX*stosunekDługościOryginału);
                             Obraz=ZmieńRozmiarObrazu(img,maxX,NowyY);
                        }
                        else{
                             Obraz=ZmieńRozmiarObrazu(img,NowyX,maxY);
                        }
           
        }
         return Obraz;
     }
 public static BufferedImage ZmieńRozmiarObrazu(BufferedImage img, int newW, int newH) { 
            java.awt.Image tmp = img.getScaledInstance(newW, newH, java.awt.Image.SCALE_SMOOTH);
            BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_3BYTE_BGR);
            Graphics2D g2d = dimg.createGraphics();
            g2d.drawImage(tmp, 0, 0, null);
            g2d.dispose();

    return dimg;
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Tworzenie pliku PDF.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        //stworzenie pliku pdf
      Document document = new Document();

        try {
            //pobranie instancji oraz stworzenie pliku 
            PdfWriter.getInstance(document,new FileOutputStream(ścieżkaZapisu));
            BaseFont bf = BaseFont.createFont("c:/windows/fonts/arial.ttf", 
            BaseFont.CP1250, BaseFont.EMBEDDED); 
            Font normalny = new Font(bf, 10); 
            
            BaseFont bf1 = BaseFont.createFont("c:/windows/fonts/arial.ttf", 
            BaseFont.CP1250, BaseFont.EMBEDDED); 
            Font duży = new Font(bf1, 18, Font.BOLD|Font.ITALIC); 
            
            BaseFont bf2 = BaseFont.createFont("c:/windows/fonts/arial.ttf", 
            BaseFont.CP1250, BaseFont.EMBEDDED); 
            Font bardzoDuży = new Font(bf2, 21, Font.BOLD); 
             // następnie otwieranie go by mógł w nim zapisywać bądź modyfikować dane 
            
             document.open();
            // dodanie paragrafu tzn. zdania/ sentencji
             document.add(new Paragraph("Dane ustawienia preprocessingu oraz wynik w postaci obrazu.", bardzoDuży));
             document.add(new Paragraph("Wartości parametrów:", duży));
             document.add(new Paragraph("-Czerwień: "+Czerwony, normalny));
             document.add(new Paragraph("-Zieleń: "+Zielony, normalny));
             document.add(new Paragraph("-Niebieski:  "+Niebieski, normalny));
             document.add(new Paragraph("-Jasność:  "+Jasność, normalny));
             document.add(new Paragraph("-Wartość progowa: "+wartośćProgowa, normalny));
             document.add(new Paragraph("-Kontrast:  "+Kontrast, normalny));
             document.add(new Paragraph("-Rodzaj zastowanego progowania:  "+RodzajProgowania, normalny));
             document.add(new Paragraph("Wynik w postaci obrazu:", duży));
             ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
           
             ImageIO.write(Obraz, "png", baos);
             Image iTextImage = Image.getInstance(baos.toByteArray());
             document.add(iTextImage);
            //zamknięcie pliku
             document.close(); // no need to close PDFwriter?

        } catch (DocumentException | FileNotFoundException e) {
        } catch (IOException ex) {
           Logger.getLogger(TworzeniePDF.class.getName()).log(Level.SEVERE, null, ex);
       }
        
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
